import logging 
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler
import os
from dotenv import load_dotenv

# üî• Set up logging immediately after imports
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# Load environment variables from .env file
load_dotenv()

# Get the bot token from the environment
TOKEN = os.getenv('TOKEN')

if not TOKEN:
    raise ValueError("Token not found! Please make sure the 'TOKEN' environment variable is set.")

# Custom function to clear any active webhook
async def post_init(application: Application) -> None:
    """Delete any existing webhook to avoid conflicts with polling."""
    await application.bot.delete_webhook()
    logging.info("Webhook deleted successfully.")

# Custom error handler function
async def error_handler(update: Update, context: CallbackContext) -> None:
    """Log the error and send a message to the user."""
    logging.error(f"An error occurred: {context.error}")
    if update.effective_chat:
        await context.bot.send_message(
            chat_id=update.effective_chat.id, 
            text="An error occurred. Please try again later."
        )

# Menu items
menu_items = {
    "0": "–ú–æ–ª–∏—Ç–≤–∞ –æ —Å–µ–±–µ –∏ –æ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö (7—Å), –∞ —Ç–∞–∫–∂–µ –æ –Ω–æ–≤—ã—Ö –º–æ–ª–∏—Ç–≤–µ–Ω–Ω–∏–∫–∞—Ö –µ—Å–ª–∏ –ì–æ—Å–ø–æ–¥—É —ç—Ç–æ —É–≥–æ–¥–Ω–æ",
    "0.1": "üî∫–ù–µ —É–ø–∞—Å—Ç—å –≤ –≥—Ä–µ—Ö –ø—Ä–µ–ª—é–±–æ–¥–µ—è–Ω–∏—è",
    "1": "1. –ò—Å–ø–æ–ª–Ω—è—Ç—å—Å—è –î—É—Ö–æ–º –°–≤—è—Ç—ã–º",
    "1.1": "1.1. –í—Å–µ–≥–¥–∞ –∑–∞ –≤—Å–µ –∫–∞—è—Ç—å—Å—è",
    "1.2": "1.2. –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –±—ã—Ç—å –ø–æ—Å–ª—É—à–Ω—ã–º –ò–∏—Å—É—Å—É",
    "1.3": "1.3. –í—Å–µ–≥–¥–∞ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–µ—Ä–∏—Ç—å –ò–∏—Å—É—Å—É",
    "4": "4. –ü—Ä–µ–±—ã–≤–∞—Ç—å –≤ –º–æ–ª–∏—Ç–≤–µ",
    "5": "5. –ò–∑—É—á–∞—Ç—å –°–ª–æ–≤–æ",
    "6": "6. –ò–º–µ—Ç—å –æ–±—â–µ–Ω–∏–µ —Å–æ —Å–≤—è—Ç—ã–º–∏",
    "7": "7. –°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ–≤–∞—Ç—å –æ–± –ò–∏—Å—É—Å–µ"
}

# Questions for each menu item
questions = {
    "0": ["–í—ã –º–æ–ª–∏–ª–∏—Å—å –æ —Å–µ–±–µ –∏ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –≥—Ä—É–ø–ø—ã?", "–í—ã –ø—Ä–æ—Å–∏–ª–∏ –ë–æ–≥–∞ –ø–æ—Å–ª–∞—Ç—å –µ—â–µ –º–æ–ª–∏—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤?"],
    "0.1": ["–í—ã –º–æ–ª–∏–ª–∏—Å—å –æ —Ç–æ–º, —á—Ç–æ–±—ã –ë–æ–≥ –≤—Å–µ–ª–∏–ª –≤ –≤–∞—Å –∏ –≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –≤–µ–ª–∏–∫–∏–π —Å—Ç—Ä–∞—Ö –ø–µ—Ä–µ–¥ –≥—Ä–µ—Ö–æ–º –ø—Ä–µ–ª—é–±–æ–¥–µ—è–Ω–∏—è?", "–í—ã –ø–æ—Å—Ç–∏–ª–∏—Å—å –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ?"],
    "1": ["–í—ã —Å—Ç—Ä–µ–º–∏–ª–∏—Å—å –∏—Å–ø–æ–ª–Ω–∏—Ç—å—Å—è –î—É—Ö–æ–º –°–≤—è—Ç—ã–º —Å–µ–≥–æ–¥–Ω—è?", "–ò—Å–ø–æ–ª–Ω—è–ª–∏ –ª–∏ –≤—ã 3 –∑–∞–∫–æ–Ω–∞ –¥—É—Ö–æ–≤–Ω–æ–π –∂–∏–∑–Ω–∏?"],
    "1.1": ["–í—ã –∫–∞—è–ª–∏—Å—å —Å–µ–≥–æ–¥–Ω—è –∑–∞ —Å–≤–æ–∏ –≥—Ä–µ—Ö–∏?", "–ö–∞–∫–∏–µ –≥—Ä–µ—Ö–∏ –∏—Å–ø–æ–≤–µ–¥–æ–≤–∞–ª–∏ –ø—Ä–µ–¥ –ë–æ–≥–æ–º –∏ –ª—é–¥—å–º–∏?"],
    "1.2": ["–ë—ã–ª–∏ –ª–∏ –≤—ã –ø–æ—Å–ª—É—à–Ω—ã –ò–∏—Å—É—Å—É —Å–µ–≥–æ–¥–Ω—è?", "–ß—Ç–æ –≤—ã —Å–¥–µ–ª–∞–ª–∏, —á—Ç–æ–±—ã –ø–æ–¥—á–∏–Ω–∏—Ç—å—Å—è –≤–æ–ª–µ –ò–∏—Å—É—Å–∞ —Å–µ–≥–æ–¥–Ω—è?"],
    "1.3": ["–í—ã –≤–µ—Ä–∏—Ç–µ –ò–∏—Å—É—Å—É –≤–æ –≤—Å–µ–º?", "–í—ã –¥–æ–≤–µ—Ä—è–ª–∏ –ë–æ–≥—É —Å–µ–≥–æ–¥–Ω—è –≤ —Å–≤–æ–∏—Ö –¥–µ–ª–∞—Ö –∏ –º—ã—Å–ª—è—Ö?"],
    "4": ["–í—ã –º–æ–ª–∏–ª–∏—Å—å —Å–µ–≥–æ–¥–Ω—è?", "–ö–∞–∫ –¥–æ–ª–≥–æ –≤—ã –ø—Ä–µ–±—ã–≤–∞–ª–∏ –≤ –º–æ–ª–∏—Ç–≤–µ?"],
    "5": ["–í—ã –∏–∑—É—á–∞–ª–∏ –°–ª–æ–≤–æ —Å–µ–≥–æ–¥–Ω—è?", "–ö–∞–∫—É—é —á–∞—Å—Ç—å –ü–∏—Å–∞–Ω–∏—è –≤—ã –ø—Ä–æ—á–∏—Ç–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è?"],
    "6": ["–í—ã –∏–º–µ–ª–∏ –æ–±—â–µ–Ω–∏–µ —Å–æ —Å–≤—è—Ç—ã–º–∏ —Å–µ–≥–æ–¥–Ω—è?", "–° –∫–µ–º –∏–∑ –±—Ä–∞—Ç—å–µ–≤ –∏ —Å–µ—Å—Ç–µ—Ä –≤—ã —Å–µ–≥–æ–¥–Ω—è –æ–±—â–∞–ª–∏—Å—å?"],
    "7": ["–í—ã —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ–≤–∞–ª–∏ –æ–± –ò–∏—Å—É—Å–µ —Å–µ–≥–æ–¥–Ω—è?", "–ö–æ–º—É –≤—ã —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∏ –æ–± –ò–∏—Å—É—Å–µ —Å–µ–≥–æ–¥–Ω—è?"],
}

# User's last message storage
user_last_message = {}

# /start command
async def start(update: Update, context: CallbackContext) -> None:
    """Send the main menu to the user after the /start command and clear previous messages."""
    chat_id = update.message.chat_id

    # Delete the current message from the user
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
    except Exception as e:
        logging.error(f"Error deleting message for /start: {e}")
    
    # Delete the last message with questions
    if chat_id in user_last_message:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=user_last_message[chat_id])
        except Exception as e:
            logging.error(f"Error deleting message: {e}")
    
    # Send the menu
    reply_markup = build_menu()
    message = await context.bot.send_message(chat_id=chat_id, text="–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=reply_markup)
    user_last_message[chat_id] = message.message_id  # Save message ID

# Function to create the menu keyboard
def build_menu():
    """Creates and returns the keyboard with menu items."""
    keyboard = []
    for key, value in menu_items.items():
        keyboard.append([InlineKeyboardButton(value, callback_data=key)])
    return InlineKeyboardMarkup(keyboard)

# Handle button presses
async def button_handler(update: Update, context: CallbackContext) -> None:
    """Handles user menu selection."""
    query = update.callback_query
    await query.answer()
    
    # Get the selected menu item
    selected_item = query.data
    item_title = menu_items.get(selected_item, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É–Ω–∫—Ç")
    
    # Create a message with questions for the selected menu item
    if selected_item in questions:
        question_list = questions[selected_item]
        message_text = f"<b>{item_title}</b>\n\n–ó–∞–¥–∞–π—Ç–µ —Å–µ–±–µ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã, –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–∏–º –ø—É–Ω–∫—Ç–∞–º.:"
        for i, question in enumerate(question_list, start=1):
            message_text += f"\n{i}. <i>{question}</i>"
    else:
        message_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —ç—Ç–æ–º—É –ø—É–Ω–∫—Ç—É."

    # Add the menu to the message with questions
    message_text += "\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:</b>"
    reply_markup = build_menu()
    
    # Edit the message only if it's different
    if query.message.text != message_text or query.message.reply_markup != reply_markup:
        await query.edit_message_text(text=message_text, reply_markup=reply_markup, parse_mode='HTML')

# Main entry point
if __name__ == "__main__":
    logging.info("Bot started. Configuring handlers and starting polling.")
    
    # Create the bot application instance
    application = Application.builder().token(TOKEN).post_init(post_init).build()
    
    # Add a command handler for /start command
    application.add_handler(CommandHandler("start", start))
    
    # Add a callback query handler for buttons
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # Add error handler to catch uncaught exceptions
    application.add_error_handler(error_handler)

    try:
        # Run polling to keep the bot running, clear pending updates to avoid conflict
        application.run_polling(drop_pending_updates=True)
    
